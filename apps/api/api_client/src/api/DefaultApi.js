/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import ResponseCompileCompileGet from '../model/ResponseCompileCompileGet';

/**
* Default service.
* @module api/DefaultApi
* @version 0.1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the autoBuildCrewAutoBuildGet operation.
     * @callback module:api/DefaultApi~autoBuildCrewAutoBuildGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Auto Build Crew
     * @param {String} generalTask 
     * @param {String} profileId 
     * @param {module:api/DefaultApi~autoBuildCrewAutoBuildGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    autoBuildCrewAutoBuildGet(generalTask, profileId, callback) {
      let postBody = null;
      // verify the required parameter 'generalTask' is set
      if (generalTask === undefined || generalTask === null) {
        throw new Error("Missing the required parameter 'generalTask' when calling autoBuildCrewAutoBuildGet");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling autoBuildCrewAutoBuildGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'general_task': generalTask,
        'profile_id': profileId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/auto-build', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the compileCompileGet operation.
     * @callback module:api/DefaultApi~compileCompileGetCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, module:model/{String: ResponseCompileCompileGet}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Compile
     * @param {String} id 
     * @param {module:api/DefaultApi~compileCompileGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, module:model/{String: ResponseCompileCompileGet}>}
     */
    compileCompileGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling compileCompileGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': ResponseCompileCompileGet};
      return this.apiClient.callApi(
        '/compile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the improveImproveGet operation.
     * @callback module:api/DefaultApi~improveImproveGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Improve
     * @param {Number} wordLimit 
     * @param {String} prompt 
     * @param {module:model/String} promptType 
     * @param {Number} temperature 
     * @param {String} profileId 
     * @param {module:api/DefaultApi~improveImproveGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    improveImproveGet(wordLimit, prompt, promptType, temperature, profileId, callback) {
      let postBody = null;
      // verify the required parameter 'wordLimit' is set
      if (wordLimit === undefined || wordLimit === null) {
        throw new Error("Missing the required parameter 'wordLimit' when calling improveImproveGet");
      }
      // verify the required parameter 'prompt' is set
      if (prompt === undefined || prompt === null) {
        throw new Error("Missing the required parameter 'prompt' when calling improveImproveGet");
      }
      // verify the required parameter 'promptType' is set
      if (promptType === undefined || promptType === null) {
        throw new Error("Missing the required parameter 'promptType' when calling improveImproveGet");
      }
      // verify the required parameter 'temperature' is set
      if (temperature === undefined || temperature === null) {
        throw new Error("Missing the required parameter 'temperature' when calling improveImproveGet");
      }
      // verify the required parameter 'profileId' is set
      if (profileId === undefined || profileId === null) {
        throw new Error("Missing the required parameter 'profileId' when calling improveImproveGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'word_limit': wordLimit,
        'prompt': prompt,
        'prompt_type': promptType,
        'temperature': temperature,
        'profile_id': profileId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/improve', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the redirectToDocsGet operation.
     * @callback module:api/DefaultApi~redirectToDocsGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Redirect To Docs
     * @param {module:api/DefaultApi~redirectToDocsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    redirectToDocsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
