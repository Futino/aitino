/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPValidationError from '../model/HTTPValidationError';
import Message from '../model/Message';
import RunRequestModel from '../model/RunRequestModel';
import Session from '../model/Session';

/**
* Sessions service.
* @module api/SessionsApi
* @version 0.1.0
*/
export default class SessionsApi {

    /**
    * Constructs a new SessionsApi. 
    * @alias module:api/SessionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteSessionSessionsDeletePost operation.
     * @callback module:api/SessionsApi~deleteSessionSessionsDeletePostCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Session
     * @param {String} sessionId 
     * @param {module:api/SessionsApi~deleteSessionSessionsDeletePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    deleteSessionSessionsDeletePost(sessionId, callback) {
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling deleteSessionSessionsDeletePost");
      }

      let pathParams = {
      };
      let queryParams = {
        'session_id': sessionId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/sessions/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMessagesSessionsMessagesGet operation.
     * @callback module:api/SessionsApi~getMessagesSessionsMessagesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Message>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Messages
     * @param {String} sessionId 
     * @param {module:api/SessionsApi~getMessagesSessionsMessagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Message>}
     */
    getMessagesSessionsMessagesGet(sessionId, callback) {
      let postBody = null;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling getMessagesSessionsMessagesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'session_id': sessionId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Message];
      return this.apiClient.callApi(
        '/sessions/messages/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSessionsSessionsPost operation.
     * @callback module:api/SessionsApi~getSessionsSessionsPostCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Session>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Sessions
     * @param {Object} opts Optional parameters
     * @param {String} [profileId] 
     * @param {String} [sessionId] 
     * @param {module:api/SessionsApi~getSessionsSessionsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Session>}
     */
    getSessionsSessionsPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'profile_id': opts['profileId'],
        'session_id': opts['sessionId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Session];
      return this.apiClient.callApi(
        '/sessions/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the insertSessionSessionsInsertPost operation.
     * @callback module:api/SessionsApi~insertSessionSessionsInsertPostCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Insert Session
     * @param {String} sessionId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/SessionsApi~insertSessionSessionsInsertPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    insertSessionSessionsInsertPost(sessionId, body, callback) {
      let postBody = body;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling insertSessionSessionsInsertPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling insertSessionSessionsInsertPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'session_id': sessionId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/sessions/insert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the runCrewSessionsRunPost operation.
     * @callback module:api/SessionsApi~runCrewSessionsRunPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run Crew
     * @param {module:model/RunRequestModel} runRequestModel 
     * @param {Object} opts Optional parameters
     * @param {Boolean} [mock = false)] 
     * @param {module:api/SessionsApi~runCrewSessionsRunPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    runCrewSessionsRunPost(runRequestModel, opts, callback) {
      opts = opts || {};
      let postBody = runRequestModel;
      // verify the required parameter 'runRequestModel' is set
      if (runRequestModel === undefined || runRequestModel === null) {
        throw new Error("Missing the required parameter 'runRequestModel' when calling runCrewSessionsRunPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'mock': opts['mock']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/sessions/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSessionSessionsUpdatePost operation.
     * @callback module:api/SessionsApi~updateSessionSessionsUpdatePostCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Session
     * @param {String} sessionId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/SessionsApi~updateSessionSessionsUpdatePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    updateSessionSessionsUpdatePost(sessionId, body, callback) {
      let postBody = body;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling updateSessionSessionsUpdatePost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSessionSessionsUpdatePost");
      }

      let pathParams = {
      };
      let queryParams = {
        'session_id': sessionId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/sessions/update', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the upsertSessionSessionsUpsertPost operation.
     * @callback module:api/SessionsApi~upsertSessionSessionsUpsertPostCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upsert Session
     * @param {String} sessionId 
     * @param {Object.<String, Object>} body 
     * @param {module:api/SessionsApi~upsertSessionSessionsUpsertPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    upsertSessionSessionsUpsertPost(sessionId, body, callback) {
      let postBody = body;
      // verify the required parameter 'sessionId' is set
      if (sessionId === undefined || sessionId === null) {
        throw new Error("Missing the required parameter 'sessionId' when calling upsertSessionSessionsUpsertPost");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling upsertSessionSessionsUpsertPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'session_id': sessionId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/sessions/upsert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
