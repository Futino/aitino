/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AgentModel from './AgentModel';

/**
 * The CrewModel model module.
 * @module model/CrewModel
 * @version 0.1.0
 */
class CrewModel {
    /**
     * Constructs a new <code>CrewModel</code>.
     * @alias module:model/CrewModel
     * @param receiverId {String} 
     * @param agents {Array.<module:model/AgentModel>} 
     */
    constructor(receiverId, agents) { 
        
        CrewModel.initialize(this, receiverId, agents);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, receiverId, agents) { 
        obj['receiver_id'] = receiverId;
        obj['agents'] = agents;
    }

    /**
     * Constructs a <code>CrewModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CrewModel} obj Optional instance to populate.
     * @return {module:model/CrewModel} The populated <code>CrewModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CrewModel();

            if (data.hasOwnProperty('receiver_id')) {
                obj['receiver_id'] = ApiClient.convertToType(data['receiver_id'], 'String');
            }
            if (data.hasOwnProperty('delegator_id')) {
                obj['delegator_id'] = ApiClient.convertToType(data['delegator_id'], 'String');
            }
            if (data.hasOwnProperty('agents')) {
                obj['agents'] = ApiClient.convertToType(data['agents'], [AgentModel]);
            }
            if (data.hasOwnProperty('sub_crews')) {
                obj['sub_crews'] = ApiClient.convertToType(data['sub_crews'], [CrewModel]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CrewModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CrewModel</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CrewModel.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['receiver_id'] && !(typeof data['receiver_id'] === 'string' || data['receiver_id'] instanceof String)) {
            throw new Error("Expected the field `receiver_id` to be a primitive type in the JSON string but got " + data['receiver_id']);
        }
        // ensure the json data is a string
        if (data['delegator_id'] && !(typeof data['delegator_id'] === 'string' || data['delegator_id'] instanceof String)) {
            throw new Error("Expected the field `delegator_id` to be a primitive type in the JSON string but got " + data['delegator_id']);
        }
        if (data['agents']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['agents'])) {
                throw new Error("Expected the field `agents` to be an array in the JSON data but got " + data['agents']);
            }
            // validate the optional field `agents` (array)
            for (const item of data['agents']) {
                AgentModel.validateJSON(item);
            };
        }
        if (data['sub_crews']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sub_crews'])) {
                throw new Error("Expected the field `sub_crews` to be an array in the JSON data but got " + data['sub_crews']);
            }
            // validate the optional field `sub_crews` (array)
            for (const item of data['sub_crews']) {
                CrewModel.validateJSON(item);
            };
        }

        return true;
    }


}

CrewModel.RequiredProperties = ["receiver_id", "agents"];

/**
 * @member {String} receiver_id
 */
CrewModel.prototype['receiver_id'] = undefined;

/**
 * @member {String} delegator_id
 */
CrewModel.prototype['delegator_id'] = undefined;

/**
 * @member {Array.<module:model/AgentModel>} agents
 */
CrewModel.prototype['agents'] = undefined;

/**
 * @member {Array.<module:model/CrewModel>} sub_crews
 */
CrewModel.prototype['sub_crews'] = undefined;






export default CrewModel;

